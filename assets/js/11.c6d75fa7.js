(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{197:function(t,s,a){"use strict";a.r(s);var n=a(6),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树"}},[t._v("#")]),t._v(" 二叉树")]),t._v(" "),a("h2",{attrs:{id:"二叉树基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树基础"}},[t._v("#")]),t._v(" 二叉树基础")]),t._v(" "),a("h3",{attrs:{id:"理解树结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#理解树结构"}},[t._v("#")]),t._v(" 理解树结构")]),t._v(" "),a("p",[t._v("在理解计算机世界的树结构之前，大家不妨回忆一下现实世界中的树有什么特点：一棵树往往只有一个树根，向上生长后，却可以伸展出无数的树枝、树枝上会长出树叶。由树根从泥土中吸收水、无机盐等营养物质，源源不断地输送到树枝与树叶的那一端。")]),t._v(" "),a("p",[t._v("数据结构中的树，首先是对现实世界中树的一层简化：把树根抽象为“根结点”，树枝抽象为“边”，树枝的两个端点抽象为“结点”，树叶抽象为“叶子结点”。")]),t._v(" "),a("p",[t._v("把这棵抽象后的树颠倒一下，就得到了计算机中的树结构：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/ArthurWangCN/PictureBed/20210905110841.png",alt:""}})]),t._v(" "),a("p",[t._v("结合这张图，我们来讲解树的关键特性和重点概念。希望大家可以牢记以下几点：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("树的层次计算规则")]),t._v("：根结点所在的那一层记为第一层，其子结点所在的就是第二层，以此类推。")]),t._v(" "),a("li",[a("strong",[t._v("结点和树的“高度”计算规则")]),t._v("：叶子结点高度记为1，每向上一层高度就加1，逐层向上累加至目标结点时，所得到的的值就是目标结点的高度。树中结点的最大高度，称为“树的高度”。")]),t._v(" "),a("li",[a("strong",[t._v("“度”的概念")]),t._v("：一个结点开叉出去多少个子树，被记为结点的“度”。比如我们上图中，根结点的“度”就是3。")]),t._v(" "),a("li",[a("strong",[t._v("“叶子结点”")]),t._v("：叶子结点就是度为0的结点。在上图中，最后一层的结点的度全部为0，所以这一层的结点都是叶子结点。")])]),t._v(" "),a("h3",{attrs:{id:"理解二叉树结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#理解二叉树结构"}},[t._v("#")]),t._v(" 理解二叉树结构")]),t._v(" "),a("p",[t._v("二叉树是指满足以下要求的树：")]),t._v(" "),a("ul",[a("li",[t._v("它可以没有根结点，作为一棵空树存在")]),t._v(" "),a("li",[t._v("如果它不是空树，那么必须由根结点、左子树和右子树组成，且左右子树都是二叉树。如下图：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/ArthurWangCN/PictureBed/20210905110850.png",alt:""}})]),t._v(" "),a("p",[t._v("注意，二叉树不能被简单定义为每个结点的度都是2的树。普通的树并不会区分左子树和右子树，但在二叉树中，左右子树的位置是严格约定、不能交换的。对应到图上来看，也就意味着 B 和 C、D 和 E、F 和 G 是不能互换的。")]),t._v(" "),a("h3",{attrs:{id:"二叉树的编码实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的编码实现"}},[t._v("#")]),t._v(" 二叉树的编码实现")]),t._v(" "),a("p",[t._v("在 JS 中，二叉树使用对象来定义。它的结构分为三块：")]),t._v(" "),a("ul",[a("li",[t._v("数据域")]),t._v(" "),a("li",[t._v("左侧子结点（左子树根结点）的引用")]),t._v(" "),a("li",[t._v("右侧子结点（右子树根结点）的引用")])]),t._v(" "),a("p",[t._v("在定义二叉树构造函数时，我们需要把左侧子结点和右侧子结点都预置为空：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 二叉树结点的构造函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("TreeNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("val")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("当你需要新建一个二叉树结点时，直接调用构造函数、传入数据域的值就行了：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" node  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("如此便能得到一个值为 1 的二叉树结点。")]),t._v(" "),a("p",[t._v("以这个结点为根结点，我们可以通过给 "),a("code",[t._v("left/right")]),t._v(" 赋值拓展其子树信息，延展出一棵二叉树。因此从更加细化的角度来看，一棵二叉树的形态实际是这样的：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/ArthurWangCN/PictureBed/20210905110908.png",alt:""}})]),t._v(" "),a("p",[t._v("现在各位已经掌握了做二叉树面试题所需要的一系列前置知识。接下来我会带大家一起通过写代码的方式，来搞定二叉树系列里最首当其冲、同时相当热门的考点——二叉树的遍历。")]),t._v(" "),a("h2",{attrs:{id:"二叉树的遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树的遍历"}},[t._v("#")]),t._v(" 二叉树的遍历")]),t._v(" "),a("h3",{attrs:{id:"命题思路解读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命题思路解读"}},[t._v("#")]),t._v(" 命题思路解读")]),t._v(" "),a("p",[t._v("以一定的顺序规则，逐个访问二叉树的所有结点，这个过程就是二叉树的遍历。按照顺序规则的不同，遍历方式有以下四种：")]),t._v(" "),a("ul",[a("li",[t._v("先序遍历")]),t._v(" "),a("li",[t._v("中序遍历")]),t._v(" "),a("li",[t._v("后序遍历")]),t._v(" "),a("li",[t._v("层次遍历")])]),t._v(" "),a("p",[t._v("按照实现方式的不同，遍历方式又可以分为以下两种：")]),t._v(" "),a("ul",[a("li",[t._v("递归遍历（先、中、后序遍历）")]),t._v(" "),a("li",[t._v("迭代遍历（层次遍历）")])]),t._v(" "),a("p",[t._v("层次遍历的考察相对比较孤立，我们会把它放在后续的真题归纳解读环节来讲。这里我们重点要看的是先、中、后序遍历三兄弟——由于同时纠结了二叉树和“递归”两个大热命题点，又不属于“偏难怪”之流，遍历三兄弟一直是前端算法面试官们的心头好，考察热度经久不衰。")]),t._v(" "),a("h3",{attrs:{id:"递归遍历初相见"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#递归遍历初相见"}},[t._v("#")]),t._v(" 递归遍历初相见")]),t._v(" "),a("p",[t._v("编程语言中，函数Func(Type a,……)直接或间接调用函数本身，则该函数称为递归函数。")]),t._v(" "),a("p",[t._v("简单来说，当我们看到一个函数反复调用它自己的时候，递归就发生了。“递归”就意味着“反复”，像咱们之前对二叉树的定义，就可以理解为是一个递归式的定义：")]),t._v(" "),a("ul",[a("li",[t._v("它可以没有根结点，作为一棵空树存在")]),t._v(" "),a("li",[t._v("如果它不是空树，那么必须由根结点、左子树和右子树组成，且左右子树都是二叉树。")])]),t._v(" "),a("p",[t._v("这个定义有着这样的内涵：如果我们想要创建一个二叉树结点作为根结点，那么它左侧的子结点和右侧的子结点也都必须符合二叉树结点的定义，这意味着我们要反复地执行“创建一个由数据域、左右子树组成的结点”这个动作，直到数据被分配完为止。")]),t._v(" "),a("p",[t._v("对树的遍历，就可以看做是对这三个部分的遍历。这里就引出一个问题：三个部分中，到底先遍历哪个、后遍历哪个呢？我们此处其实可以穷举一下，假如在保证“左子树一定先于右子树遍历”这个前提，那么遍历的可能顺序也不过三种：")]),t._v(" "),a("ul",[a("li",[t._v("根结点 -> 左子树 -> 右子树")]),t._v(" "),a("li",[t._v("左子树 -> 根结点 -> 右子树")]),t._v(" "),a("li",[t._v("左子树 -> 右子树 -> 根结点")])]),t._v(" "),a("p",[t._v("上述三个遍历顺序，就分别对应了二叉树的先序遍历、中序遍历和后序遍历规则。")]),t._v(" "),a("p",[t._v("在这三种顺序中，根结点的遍历分别被安排在了首要位置、中间位置和最后位置。")]),t._v(" "),a("p",[t._v("所谓的“先序”、“中序”和“后序”，“先”、“中”、“后”其实就是指"),a("strong",[t._v("根结点的遍历时机")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"遍历方法图解与编码实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#遍历方法图解与编码实现"}},[t._v("#")]),t._v(" 遍历方法图解与编码实现")]),t._v(" "),a("p",[a("strong",[t._v("递归函数的编写要点")])]),t._v(" "),a("p",[t._v("编写一个递归函数之前，大家首先要明确两样东西：")]),t._v(" "),a("ul",[a("li",[t._v("递归式")]),t._v(" "),a("li",[t._v("递归边界")])]),t._v(" "),a("p",[t._v("递归式，它指的是你每一次重复的内容是什么。在这里，我们要做先序遍历，那么每一次重复的其实就是 "),a("code",[t._v("根结点 -> 左子树 -> 右子树")]),t._v(" 这个旅行路线。")]),t._v(" "),a("p",[t._v("递归边界，它指的是你什么时候停下来。")]),t._v(" "),a("p",[t._v("在遍历的场景下，当我们发现遍历的目标树为空的时候，就意味着旅途已达终点、需要画上句号了。这个“画句号”的方式，在编码实现里对应着一个 return 语句——这就是二叉树遍历的递归边界。")]),t._v(" "),a("h4",{attrs:{id:"先序遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#先序遍历"}},[t._v("#")]),t._v(" 先序遍历")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 所有遍历函数的入参都是树的根结点对象")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("preorder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("root")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 递归边界，root 为空")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n     \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出当前遍历的结点值")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'当前遍历的结点值是：'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 递归遍历左子树 ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("preorder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 递归遍历右子树  ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("preorder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("结果：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("当前遍历的结点值是： A\n当前遍历的结点值是： B\n当前遍历的结点值是： D\n当前遍历的结点值是： E\n当前遍历的结点值是： C\n当前遍历的结点值是： F\n")])])]),a("h4",{attrs:{id:"中序遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#中序遍历"}},[t._v("#")]),t._v(" 中序遍历")]),t._v(" "),a("p",[t._v("理解了先序遍历的过程，中序遍历就不是什么难题。唯一的区别只是把遍历顺序调换了"),a("code",[t._v("左子树 -> 根结点 -> 右子树")]),t._v("：")]),t._v(" "),a("p",[t._v("递归边界照旧，唯一发生改变的是递归式里调用递归函数的顺序——左子树的访问会优先于根结点。我们参考先序遍历的分析思路，来写中序遍历的代码：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 所有遍历函数的入参都是树的根结点对象")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("inorder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("root")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 递归边界，root 为空")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n     \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 递归遍历左子树 ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("inorder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出当前遍历的结点值")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'当前遍历的结点值是：'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 递归遍历右子树  ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("inorder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("结果：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("当前遍历的结点值是： D\n当前遍历的结点值是： B\n当前遍历的结点值是： E\n当前遍历的结点值是： A\n当前遍历的结点值是： C\n当前遍历的结点值是： F\n")])])]),a("h4",{attrs:{id:"后序遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#后序遍历"}},[t._v("#")]),t._v(" 后序遍历")]),t._v(" "),a("p",[t._v("在后序遍历中，我们"),a("code",[t._v("先访问左子树")]),t._v("，"),a("code",[t._v("再访问右子树")]),t._v("，"),a("code",[t._v("最后访问根结点")]),t._v("：")]),t._v(" "),a("p",[t._v("在编码实现的时候，递归边界照旧，唯一发生改变的仍然是是递归式里调用递归函数的顺序：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("postorder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("root")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 递归边界，root 为空")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n     \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 递归遍历左子树 ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("postorder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 递归遍历右子树  ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("postorder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出当前遍历的结点值")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'当前遍历的结点值是：'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("结果：")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("当前遍历的结点值是： D\n当前遍历的结点值是： E\n当前遍历的结点值是： B\n当前遍历的结点值是： F\n当前遍历的结点值是： C\n当前遍历的结点值是： A\n")])])]),a("h3",{attrs:{id:"结语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结语"}},[t._v("#")]),t._v(" 结语")]),t._v(" "),a("p",[t._v("对于二叉树的先、中、后序遍历，各位只要掌握了其中一种的思路，就可以举一反三、顺势推导其它三种思路。不过，我个人的建议，仍然是以“默写”的标准来要求自己，面试时不要指望“推导”，而应该有条件反射。这样才可以尽量地提高你做题的效率，为后面真正的难题、综合性题目腾出时间。")]),t._v(" "),a("p",[t._v("关于二叉树遍历类题目的讨论，这里只是一个开始。二叉树的先、中、后包括层次遍历的玩法，还有很多很多，我们在后续的真题归纳解读专题、包括末尾的大规模刷题训练中，会带大家认识更多新奇好玩的东西。")])])}),[],!1,null,null,null);s.default=r.exports}}]);